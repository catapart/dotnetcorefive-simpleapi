namespace SimpleAPI_NetCore50.Utilities
{
    // "Artifacts" are data items that are generated by one process
    // but handled or consumed by another, independent process;
    // Many build pipelines use artifacts, because the data can be
    // of any arbitrary type. This is complicated to set up, but adds
    // a lot of flexibility to the API.
    //
    // Here, we use artifacts to store variables from an establishing
    // http request for opening a websocket session. Then, the websocket
    // session can access those variables when the client calls in with
    // a websocket request.

    public interface IProcessArtifact
    {
        string Name { get; set; }
        System.Type DataType { get; }
        object Data { get; }
    }

    public interface IProcessArtifact<ValueT> : IProcessArtifact
    {
        new ValueT Data { get; }
    }

    public class ProcessArtifact<ValueT> : IProcessArtifact<ValueT>
    {
        public string Name { get; set; }
        public System.Type DataType
        {
            get
            {
                return typeof(ValueT);
            }
        }

        object IProcessArtifact.Data
        {
            get
            {
                return Data;
            }
        }

        public ValueT Data { get; private set; }


        public ProcessArtifact(string name, ValueT value)
        {
            Name = name;
            Data = value;
        }

        public void SetData(ValueT value)
        {
            Data = value;
        }
    }

    public static class ProcessArtifact
    {
        public static IProcessArtifact Create(string name, object value)
        {
            System.Type attributeType = typeof(ProcessArtifact<>).MakeGenericType(value.GetType());
            return System.Activator.CreateInstance(attributeType, name, value) as IProcessArtifact;
        }
    }
}
